Welcome to Pyom!

In our efforts to convert the venerable Rom DikuMUD derivative from a legacy C
codebase to a more modern object-oriented Python codebase, we've had to make
some fairly major changes to the infrastructure, as well as to the data format
itself.

Because this is just a few of us volunteering our time, documentation tends to
lag well behind the actual code, as is sadly typical in almost every open
source project.  I'm going to make some effort to rectify that situation here.

This is a work in progress, so some things described here will not be
finished,  and some may in fact be abandoned or changed by the time you read
this.  Eventually, we'll get this all tidied up into a proper API document and
the expected builders documents, but for now... this is a rough description of
the general concepts we're following, and some ideas of how things might
proceed.

Currently, Pyom boots by importing all the original ROM area files from their
original file formats.  This is not ideal, because those formats were designed
for hand editing with a text editor, usually over a slow dialup modem link.

We've chosen to use JSON to store our data natively, and as we expand this
coverage we'll likely change the directory structure several times to organize
it.  I'd like to put forth an idea for that layout here.


I would propose that our native file structure be composed of subdirectories
that contain JSON objects for each individual item.  These items should be
organized in a hierarchy to make locating any individual file quick and easy,
both for the game driver AND for the human admin who might want to inspect or
hand-edit them.

As a top level, we currently have ../data/ which holds a variety of .json
files, created at boot time after the legacy formats have been loaded.  Some
of these might also be created from built-in data tables, allowing data
editing to expand what used to require code changes.

I propose the following layout:

data/
    system/
    messages/
    docs/
    world/
        state/
        areas/
            000-areaname/
                area.json
                rooms/
                    000000.json
                items/
                    000000.json
                npcs/
                    000000.json
        instances/
            000000000.json
    players/
        a/ b/ c/ ... z/
    immortals/
    logs/

The system directory would contain various in-game data tables and
configuration settings which are loaded at boot time, and are required for
normal game operations.  Most of what's currently in the data directory would
be moved into system.

The messages directory would contain various text files that are used to avoid
placing hard-coded text into the codebase directly.  Typically, this would
include the login banners, various readmes, license files, and possibly other
data the admin may wish to edit outside of the code system.

Docs would contain all the help files that are file-based.  I expect the help
system to also include in-code documentation directly accessed from the game,
so that various API calls are self-documenting... but that will come later.

Players simply stores the player data, as you'd expect.  I would break this up
into subdirectories for ease of navigation.

Immortals stores the same player data as players, but for immortal characters.
By specifically moving them to a different directory, we provide a small
amount of added security AND make it easier to see who is an immortal.

At some point in the future, there may also be an account/ directory so that
multiple players and immortals can be grouped under a single login system.

Logs is a directory to hold logfiles, nothing special here.

The world directory is the meat of the game.  It has several subdirectories
and may have others as we see the need for them over time.

world/state is to hold state information that pertains to the entire game
world, but is saved and/or generated from the game data, NOT configuration
values such as you'd find in system/.  Examples of this would be the state
information for the game's weather system.

world/areas/ holds the game data in the native .json format.  Inside areas/
you should find a directory for each game area.  Each area directory will
contain an area.json file that has the basic area information, as well as
resets and anything else that's relevant at the zone level.  This should also
include the vnum ranges.

The rooms directory stores the template data for all the rooms in the area,
stored one room per file in JSON format.  The filename should be the vnum,
perhaps zero-padded to a fixed width to make sorting natural.

The items and npcs directories likewise contain tempalte data for all the
items and npcs in the area, in JSON format, likewise padded (or not).

One of the core concepts we've added to Pyom is a clear distinction between a
template and an instance of the template.  While both share the same Class,
and the same overall data, Every object you see in the game world is actually
an instance, having a unique instance_id.

The instances/ directory saves a copy of every room, item, or npc's data,
referenced by instance_id.  This gives us the ability to not only simplify
inventory management, but provide full game snapshots, if desired.

The basic idea is simple enough... All rooms, items, and npc's have a
destructor which gets called whenever the code object in question is
destroyed, either by the code itself, or by the game shutting down.  If the
object in question does not have a "no_save" flag set, the destructor will
proceed to save the object's data to the appropriate file in the instances
directory.  Objects which contain other objects (such as an NPC that has a set
of gear and loot) hold those inventories as lists of instance_id's, which can
be restored easily.

At boot time, the game should first load any instanced objects which have save
files.  THEN the reset cycle will be run, thus allowing you to restore a
snapshot of the game.  If the zone reset says you need 5 orcs in the zone, and
there were 3 alive when it was shutdown, those three will be reloaded and the
reset wil only need to create 2 new ones.

Because of the large values instance_id will obtain over time, I suggest
making subdirectories inside instances/ to help manage the large volume of
files.  A common way to do this is to take an MD5 hash as hexadecimal and
use the first 2 characters, and then the first 4 characters....

So, instance_id 7436732 has an MD5 checksum of
5f58ac0b74b61bc91aae27d10926a647.  This would mean you'd store the instance
file with the pathname of data/instances/5f/58/7436732.json

I know that's counter-intuitive, as you'd LIKE to put it in
74/36/7436732.json, but to keep the filename length the same, you'd have to
zero-pad to a potentially large number of digits, and that means your files
would all clump together.  The MD5 process spreads things out more-or-less
evently.

Exmaples:

quixadhal@lenin:~/PyRom/Rom24/pysrc$ echo 7436732 | md5sum
5f58ac0b74b61bc91aae27d10926a647  -
quixadhal@lenin:~/PyRom/Rom24/pysrc$ echo 7436733 | md5sum
8148250f437f4c86f92a99555ee8bf5f  -
quixadhal@lenin:~/PyRom/Rom24/pysrc$ echo 7436734 | md5sum
d83398881afdf4ee7ba14cb69ff507eb  -
quixadhal@lenin:~/PyRom/Rom24/pysrc$ echo 7436735 | md5sum
b23ee8144c7a900c205950f214f0411c  -

Even though the id's are sequential, the checksums are widely spread out.

Comments?

----

So, Syn and I had a google docs thing about the whole equipment system.

I'll paste that here... it's changed a little bit, but the basic outline
may still be useful.

Equipment code layout - Syn:

Module:
equipment

Class:
Equipment

Inheritors:
Module: living
Class: Living - PC and NPC

Module: item_flags

On living objects:


equipped is a dictionary of equipment slots
Each slot is either an integer, being the instance_id of the object equipped,
or None, meaning the slot is empty.

On items:

equips_to is a named tuple which contains information about where the item
may be equipped.

It contains a set called slots which contains the valid equipment slots to
which the item can be equipped.

It contains a list called additional, which contains zero or more slot sets
which are also used when equipping the item.

It contains a number of other property flags which may affect the behavior
of the item when equipped or being equipped.

So, here’s a couple of examples:

A dagger may be equipped to either the main hand or offhand slots.

dagger.slots = {‘main hand’, ‘off hand’}
dagger.additional = {}
#dagger.anti_good = True
#dagger.no_drop = False
dagger.properties = Bit(‘anti_good no_drop’) # name the various bits for
                                            # ‘anti_good’, ‘no_drop’, etc.
dagger.affects = [] # a list of spell affects which are active on the item

A maul is a two-handed weapon that is equipped to the main hand but requires
the offhand to be free.

maul.slots = {‘main hand’}
maul.additional = {‘off hand’}
maul.anti_mage = True

When equipping an item that has additional slots, the equipping action should
set the instance_id of the item in ALL slots that are involved, so in this case,
the same item is equipped to both the ‘main hand’ and ‘off hand’ slots.

As a consequence, when removing an item, you only actually remove it when no other
slots match its instance_id.  This comes into play with disarm, for example.  It’s
traditional (in AD&D rules) to require two successful disarm attempts to disarm
someone using a two-handed weapon.  The first disarm would clear the instance_id
from the item’s additional slots (until all in the set are now empty in the equipment
list).  If all are empty, it would finally actually disarm the target.

----

I've been planning some changes to the instance system, and am still in the planning
stage, even though I did check in a file that will eventually hold some of that
code.

Right now, we have a couple of (evil!) global variables that live in (evil!) merc.py.
The main one is global_instances[], which is a dict mapping instance_id to object
references for ALL in-game entities that can have instances.  Currently, none of these
objects persist, unless they are stored in the inventory code of something else.

The result is that we currently "waste" our time by loading up the old world data from
the original ROM format files, creating new instances (template AND instance) for each
and every thing, then at shutdown all those get thrown away and we repeat the same
process at next boot.

So, my goal is to allow the game to more fully save state.  That is, once we've done
that work, we don't want to read in the original area format files again, unless we
explicitly want to import them, either by a new import command, or by a flag given
to the driver at boot time to say "fresh install, import now".

To handle this, the logical first step is to save the global_instances list off to
disk, so it can be restored, and so each item in that list can be restored.

My current thinking is to create an instance.py module which will hold the
global_instances dict (as well as any of the ancillary dicts that index it by
type), and the max_instance_id value.  It will also have a new Instance() class,
which is what the global dict will now contain, instead of direct references.

The class will hold the instance_id, as well as type (and module) information,
and a reference that serves the old purpose of allowing access to the object from
the id reference.

On save, the max_id and global dict will be serialized to JSON and stored on disk,
minus the reference pointer.

During the save operation, it would be wise to also have the code iterate over
the list and call the save() method on every object present.  This save() method
will open the appropriate file (determined by the method above) and call the
to_json() method on the object to serialize its data.

On load, they will be reloaded, and then code will walk the list and use the
type/module information to reload the instance objects and restore their reference
pointers.  Essentially, we'll create a new object of the appropriate type by calling
the class method load() on the appropriate class, and passing the instance_id
as an argument.

Each class will be expected to have a load() method that can accept either an
instance_id, or None (to signify the template), or possibly a string that it can
use as JSON data.  This method will, in turn call a from_json() class method to
restore the object's data into a new class instance.

Of course, for this to work, every entity in the list must be able to load and
save itself to JSON, so that's probably going to end up happening at the same
time.

The end result, if successful, will be to have the game save ALL objects (items,
npcs, players, areas, etc) and the list itself, so that it can be restored after
a reboot.  The area reset system will need to be tested against this scenario,
to ensure that it properly handles resets being called when their state is
already at goal.  (IE: code that says "ensure 4 orcs are in area foo" needs to
be able to see those 4 orcs are already there, even though they weren't added
by the reset itself this time).
