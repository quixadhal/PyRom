items with affects provide double affect when worn. EG school diploma gives +2 wis/con instead of +1 listed.

mobs give 5k exp on kill

look into door.key values, determines if it can be unlocked or not..

def reset_area(pArea):
    npc = None
    last = True
    level = 0
    for pReset in pArea.reset_list:
        if pReset.command == 'M':
            if pReset.arg1 not in merc.characterTemplate.keys():
                logger.error("Reset_area: 'M': bad vnum %d.", pReset.arg1)
                continue
            else:
                npcTemplate = merc.characterTemplate[pReset.arg1]

            if pReset.arg3 not in merc.roomTemplate.keys():
                logger.error("Reset_area: 'R': bad vnum %d.", pReset.arg3)
                continue
            else:
                roomInstance_id = merc.instances_by_room[pReset.arg3][0]
                roomInstance = merc.global_instances[roomInstance_id]

            if npcTemplate.count >= pReset.arg2:
                last = False
                continue
            count = 0
            for npc_id in roomInstance.people:
                npc = merc.global_instances[npc_id]
                if npc.is_npc():
                    if npc.vnum == npcTemplate.vnum:
                        count += 1
                        if count >= pReset.arg4:
                            last = False
                            break

            if count >= pReset.arg4:
                continue

            npc = object_creator.create_mobile(npcTemplate)

            #
            # * Check for pet shop.
            # */

            if roomInstance.vnum - 1 in merc.roomTemplate.keys():
                prevRoomInstance_id = merc.instances_by_room[roomInstance.vnum - 1][0]
                prevRoomInstance = merc.global_instances[prevRoomInstance_id]
                if state_checks.IS_SET(prevRoomInstance.room_flags, merc.ROOM_PET_SHOP):
                    npc.act.set_bit(merc.ACT_PET)

            # set area */
            npc.area = roomInstance.area

            roomInstance.put(npc)
            level = max(0, min(npc.level - 2, merc.LEVEL_HERO - 1))
            last = True

        elif pReset.command == 'O':
            if pReset.arg1 not in merc.itemTemplate.keys():
                logger.error("Reset_area: 'O': bad vnum %d.", pReset.arg1)
                continue
            else:
                itemTemplate = merc.itemTemplate[pReset.arg1]

            if pReset.arg3 not in merc.roomTemplate.keys():
                logger.error("Reset_area: 'R': bad vnum %d.", pReset.arg3)
                continue
            else:
                roomInstance_id = merc.instances_by_room[pReset.arg3][0]
                roomInstance = merc.global_instances[roomInstance_id]

            if pArea.player_count > 0 or handler_item.count_obj_list(itemTemplate, roomInstance.items) > 0:
                last = False
                continue

            item = object_creator.create_item(itemTemplate, min(game_utils.number_fuzzy(level), merc.LEVEL_HERO - 1))
            item.cost = 0
            roomInstance.put(item)
            item = None
            last = True
            continue

        elif pReset.command == 'P':
            if pReset.arg1 not in merc.itemTemplate.keys():
                logger.error("Reset_area: 'P': bad vnum %d.", pReset.arg1)
                continue
            else:
                itemTemplate = merc.itemTemplate[pReset.arg1]

            if pReset.arg3 not in merc.itemTemplate.keys():
                logger.error("Reset_area: 'P': bad vnum %d.", pReset.arg3)
                continue
            else:
                item_toTemplate = merc.itemTemplate[pReset.arg3]
            if pReset.arg2 > 50:  # old format */
                limit = 6
            elif pReset.arg2 == -1:  # no limit */
                limit = 999
            else:
                limit = pReset.arg2

            item_to_list = merc.instances_by_item.get(item_toTemplate.vnum, None)
            if item_to_list:
                item_to = merc.global_instances[item_to_list[0]]

            if pArea.player_count > 0 \
                    or not item_to \
                    or (not item_to.in_room and not last) \
                    or (itemTemplate.count >= limit and random.randint(0, 4) != 0) \
                    or handler_item.count_obj_list(itemTemplate, item_to.inventory) > pReset.arg4:
                last = False
                continue
            count = handler_item.count_obj_list(itemTemplate, item_to.inventory)
            #Converted while to For Loop, testing indicated
            #While loop was ~.002-.004
            #For loop ~.0009-.001
            for i in range(pReset.arg4):
                item = object_creator.create_item(itemTemplate, game_utils.number_fuzzy(item_to.level))
                item_to.put(item)
                item = None
                count += 1
                if count >= pReset.arg4:
                    break
                if itemTemplate.count >= limit:
                    break

            # fix object lock state! */
            item_to.value[1] = item_toTemplate.value[1]
            last = True
        elif pReset.command == 'G' or pReset.command == 'E':
            if pReset.arg1 not in merc.itemTemplate.keys():
                logger.error("Reset_area: 'E' or 'G': bad vnum %d.", pReset.arg1)
                continue
            else:
                itemTemplate = merc.itemTemplate[pReset.arg1]
            #if not last:
            #    continue

            if not npc:
                logger.error("Reset_area: 'E' or 'G': None mob for vnum %d.", pReset.arg1)
                last = False
                continue

            olevel = 0
            if merc.characterTemplate[npc.vnum].pShop:
                if not itemTemplate.new_format:
                    if itemTemplate.item_type == merc.ITEM_PILL \
                            or itemTemplate.item_type == merc.ITEM_POTION \
                            or itemTemplate.item_type == merc.ITEM_SCROLL:
                        olevel = 53
                        for i in itemTemplate.value:
                            if i > 0:
                                for j in const.skill_table[itemTemplate.value[i]].skill_level:
                                    olevel = min(olevel, j)

                        olevel = max(0, (olevel * 3 // 4) - 2)

                    elif itemTemplate.item_type == merc.ITEM_WAND:
                        olevel = random.randint(10, 20)
                    elif itemTemplate.item_type == merc.ITEM_STAFF:
                        olevel = random.randint(15, 25)
                    elif itemTemplate.item_type == merc.ITEM_ARMOR:
                        olevel = random.randint(5, 15)
                    elif itemTemplate.item_type == merc.ITEM_WEAPON:
                        olevel = random.randint(5, 15)
                    elif itemTemplate.item_type == merc.ITEM_TREASURE:
                        olevel = random.randint(10, 20)

                item = object_creator.create_item(itemTemplate, olevel)
                item.flags.shop_inventory = True
            else:
                if pReset.arg2 > 50:  # old format */
                    limit = 6
                elif pReset.arg2 == -1:  # no limit */
                    limit = 999
                else:
                    limit = pReset.arg2

                if itemTemplate.count < limit or random.randint(0, 4) == 0:
                    item = object_creator.create_item(itemTemplate,
                                                      min(game_utils.number_fuzzy(level), merc.LEVEL_HERO - 1))
                    # error message if it is too high */
                    if item.level > npc.level + 3 \
                            or (item.item_type == merc.ITEM_WEAPON
                                and pReset.command == 'E'
                                and item.level < npc.level - 5
                                and item.level < 45):
                        logger.error("Err: obj %s (%d) -- %d, mob %s (%d) -- %d",
                                     item.short_descr, item.vnum, item.level,
                                     npc.short_descr, npc.vnum, npc.level)
                else:
                    continue
            npc.put(item)
            if pReset.command == 'E':
                npc.equip(item, True)
            item = None
            last = True
            continue

        elif pReset.command == 'D':
            if pReset.arg1 not in merc.roomTemplate.keys():
                logger.error("Reset_area: 'D': bad vnum %d.", pReset.arg1)
                continue
            else:
                roomInstance_id = merc.instances_by_room[pReset.arg1][0]
                roomInstance = merc.global_instances[roomInstance_id]
                pexit = roomInstance.exit[pReset.arg2]
            if not pexit:
                continue

            if pReset.arg3 == 0:
                pexit.exit_info = state_checks.REMOVE_BIT(pexit.exit_info, merc.EX_CLOSED)
                pexit.exit_info = state_checks.REMOVE_BIT(pexit.exit_info, merc.EX_LOCKED)
                continue
            elif pReset.arg3 == 1:
                pexit.exit_info = state_checks.SET_BIT(pexit.exit_info, merc.EX_CLOSED)
                pexit.exit_info = state_checks.REMOVE_BIT(pexit.exit_info, merc.EX_LOCKED)
                continue
            elif pReset.arg3 == 2:
                pexit.exit_info = state_checks.SET_BIT(pexit.exit_info, merc.EX_CLOSED)
                pexit.exit_info = state_checks.SET_BIT(pexit.exit_info, merc.EX_LOCKED)
                continue
            last = True
            continue

        elif pReset.command == 'R':
            if pReset.arg1 not in merc.roomTemplate.keys():
                logger.error("Reset_area: 'R': bad vnum %d.", pReset.arg1)
                continue
            else:
                roomInstance_id = merc.instances_by_room[pReset.arg1][0]
                roomInstance = merc.global_instances[roomInstance_id]
            for d0 in range(pReset.arg2 - 1):
                d1 = random.randint(d0, pReset.arg2 - 1)
                pexit = roomInstance.exit[d0]
                roomInstance.exit[d0] = roomInstance.exit[d1]
                roomInstance.exit[d1] = pexit
                break
        else:
            logger.error("Reset_area: bad command %c.", pReset.command)






M Section
_________

if pReset.command == 'M':



O Section
_________

elif pReset.command == 'O':



P Section
_________

elif pReset.command == 'P':



G - E Section
-------------

elif pReset.command == 'G' or pReset.command == 'E':



D Section
---------

elif pReset.command == 'D':


R Section
---------

elif pReset.command == 'R':


def con_get_name(self):
    global retries
    argument = self.get_command()
    ch = Dummy()
    name = argument.title()
    new_connection[name] = {'name': name}

    if not check_parse_name(name):
        self.send("Illegal name, try another.\nName:")
        retries += 1
        if retries > 3:
            self.send('Please come back when you think of a name.')
            self.deactivate()
        return

    retries = 0

    ch_stub = pc.Pc.load_stub(name)
    if ch_stub:
        found = True
        if ch_stub['is_banned']:
            logger.info("Denying access to %s@%s" % (ch_stub['name'], self.addrport()))
            self.send("You have been denied access.")
            self.deactivate()
            return
        if settings.WIZLOCK and not ch_stub['is_immortal']:
            self.send("Game is Wizlocked. Try again later.")
            self.deactivate()
            return


if ch._environment in merc.global_instances.keys() and not ch.level == 0:
        room = merc.global_instances.get(ch._environment, None)
        if room and ch._environment != room.instance_id:
            room.put(ch)
    elif ch.is_immortal() and not ch.level == 0:
        to_instance_id = merc.instances_by_room[merc.ROOM_VNUM_CHAT][0]
        to_instance = merc.rooms[to_instance_id]
        to_instance.put(ch)
    else:
        to_instance_id = merc.instances_by_room[merc.ROOM_VNUM_TEMPLE][0]
        to_instance = merc.rooms[to_instance_id]
        to_instance.put(ch)

    handler_game.act("$n has entered the game.", ch, None, None, merc.TO_ROOM)
    ch.do_look("auto")
    ch.send("\n\n")
    ch.do_term("")
