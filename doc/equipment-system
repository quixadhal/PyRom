*Equipment System Revision*
___________________________

Primary contributor: Syn, with much help and advice from Quixadhal and Davion


*Preface*
_________

The project to revise, and re-engineer the equipment system was made as the overall project was maturing.
This decision came after much work had been done to define clear instance vs template behavior in the code,
and it was found that several other systems in the game were simply lacking.

As a result, I decided to attack the old way that items and equipment were handled.

Items had wear_flags, and wear_locs wear_flags are the flags brought in from the area file, eg ITEM_WEAR_FINGER,
wear_locs on the other hand, were set only after the item was equipped.

For example, the old system effectively did the following:

    1. Character -> get item
    2. Item moved to player inventory
    3. Character -> wear item
    4. Item checks if something else in the inventory has this wear_loc
    5. Item sets wear_loc
    6. Character -> inventory
    7. Game: Item has a configured wear_loc - make it invisible to inventory

As you can see, this left the item in the inventory, from a code perspective, and simply made it appear invisible from
any asking commands/lists unless they wanted to look at equipment.

There were many reasons for why ROM/Diku did what it did, but those aren't really applicable in most cases anymore.


*Theory*
________

I started work with the following thoughts:

    A. Equipment should not remain in an inventory if being worn
    B. wear_loc and wear_flag inconsistencies were poor
        1. wear_flag WEAR_FINGER was equivelant to either wear_loc WEAR_FINGER_L or WEAR_FINGER_R
    C. The equipment strings should be built into the equipment listings of the character
    D. Items should handle their flags more dynamically
    E. Some flags were inappropriate for their 'containing' table
        a. Take/No Sac being in wear_flags made little sense for example

Shortly after beginning I came across python string formatting and templates. These seemed like a powerful tool to have
available when we needed it, and the bit style flags wouldnt really work well here.

Along with that I can to find python sets.

set :
    valueless dictionary
    example - {'this', 'is', 'a', 'set'}

The benefit of a set is that it is orders faster than searching a dictionary, and appears faster than a list as well.
Sets allow for, and were built under the assumption that you want to check data, which may sound a lot like a flag!

An example usage would be

    1. Pre-configured on item: my_flags = {'bless', 'glow', 'hum'}
    2. Pre-configured on code: cant_have_flags = {'hum'}

    1. if cant_have_flags.intersection(my_flags): return
        a. the intersection would produce: {'hum'}
        b. the if would evaluate as True
        c. the code would initiate a return as a result

This thought, and theory drove most of my concept for, and of the items, and how equipment would work. Equipment and the
flags related to it, can change but more importantly are constantly checked.

The analog to the above code, for the old format would have looked more like:

    1. if state_checks.IS_SET(item.extra_flags, merc.ITEM_HUM): return
        a. this is far more unwieldly
        b. this requires another function in another module to determine if the item has this flag
        c. the secondary function hopefully is looking for the proper flag list (eg another failure point)
        d. this is far slower than walking the hashed set entries

So, while this is outside the scope of a change to Equipment, directly, it seemed like a good time to tackle this issue
along with equipment and as I had already wanted to remove take and no sac from wear_flags it seemed like the perfect
opportunity.

What followed was ~1-2 weeks of back and forth between myself and primarily Quixadhal on how best to acomplish this, and
subsequently 2-3 full re-designs of the system.


*The Infrastructure*
____________________

During the *dark times* Quixadhal convinced me to map out every primary item flag (minus type) to an attribute.

These are mapped in item_flags.py into the following categories:

+------------------------+--------------------+-------------------+-------------------+
|       equips_to        |  item_attributes   | item_restrictions | weapon_attributes |
+------------------------+--------------------+-------------------+-------------------+
| location/slots         | mostly extra_flags | mostly extra_flags| item_type weapon  |
| replaces both wear_loc | no_x flags split to| all restrictive   | v[4] flags        |
|  and wear_flag         | restrictions       | flag types        | including         |
|                        |                    |                   | two-handed        |
+------------------------+--------------------+-------------------+-------------------+

equips_to:
    equips_to flags contain all of the locations that an item could be equipped to. Replaces wear_flags and wear_loc
    The flags are: light, left_finger, right_finger, neck, collar, head, body, about, waist, left_wrist, right_wrist,
                    legs, feet, main_hand, off_hand, held, floating

item_attributes:
    item_attributes contain most of the remaining flags, namely from what was extra_flags, but some from wear_flags as
    well.
    The flags are: take, inventory, glow, bless, magic, dark, lock, evil, invis, non_metal, had_timer, burn_proof,
                    melt_drop, rot_death, vis_death, sell_extract, inventory

item_restrictions:
    item_restrictions contains all restrictive flags, mostly from extra_flags.
    The flags are: no_drop, no_sac, no_remove, no_uncurse, no_purge, anti_good, anti_evil, anti_neutral, no_locate

weapon_attributes:
    weapon_attributes contains all v[4] flags for weapons, namely because i needed to fold in Two-Handed
    The flags are: flaming, vorpal, sharp, frost, shocking, vampiric, two_handed, poison

Each of these flags is an attribute, meaning that you can perform the following:

>>>item.bless
True

>>>item.flaming
False

>>>item.light = True

>>>item.take = False

You may notice some changes to some of the location slots.

Through the re-write Quixadhal and myself felt that some of the slot names, were either ambiguous, or poor given the
system I was designing, and the game in general.

To that end, the following flags were changed Original | New

neck_1 | neck
neck_2 | collar
shield | off_hand
wield  | main_hand
hold   | held
       | light

The light flag was also added, as a wear slot, instead of just item_type

Quixadhal came up with a fantastic system to take in the bits from the area files, and sort them.

After some tweaks, I set it up to take in a named tuple, and add the appropriate flags into their respective new bins
along with re-naming them.

That code is found in game_utils.py : item_flags_from_bits

Now the loading code takes in the data to pass to item_flags_from_bits, then it creates a named tuple,
of the following construction:
        flag_data = collections.namedtuple('item_flags', ('slots', 'restrictions', 'attributes', 'weapon'))
        flag_data.slots = set({})
        flag_data.restrictions = set({})
        flag_data.weapon = set({})
        flag_data.attributes = set({})

This named tuple is in turn passed to item_flags_from_bits which adds to the set of each of the named portions
Once each bin has been filled in, it sets the flags on the newly loaded item, in the form of the sets.

This in turn will then allow, for example, a loaded flag of bless, to pass: if item.bless:

On the character side, we have an Ordered Dictionary which contains the following configuration:

>>> ch.equipped
OrderedDict([('light', None), ('left_finger', None), ('right_finger', None), ('neck', None), ('collar', None),
('body', None), ('head', None), ('legs', None), ('feet', None), ('hands', None), ('arms', None), ('about_body', None),
('waist', None), ('left_wrist', None), ('right_wrist', None), ('main_hand', None), ('off_hand', None),
('held', None), ('float', None)])

This dictionary was made ordered so we would retain the placement of our wear locations when doing things like the
equipment command.

The idea is simple:

Key: location/slot
Value: None or instance_id of equipped item

When equip is called, it will:

    * Take the item, and remove it from the inventory.
    * Find the open location it can go to in the dict
    * Place the instance_id of the item in the dict, at that slot

From the item's perspective, we can find out what slot it is currently in, by using .equipped_to

This also gives us the side benefit of instantly knowing if it is equipped in general.

Therefore we can do the following:

if not item.equipped_to: ch.send('You are not wearing it.\n')

Equip and Unequip were re-written, to a large or small extent, both wear_item and remove_item have been removed,
instead bundling their checks directly into the functions.

In the case of Unequip, it was not necesarry to do much more than bundle it into the method itself.

In the case of Equip, a nested method, wear, was created to handle the brunt of the special case checking when equipping
an item. it is not directly callable.

--Will add more to this later. Syn.
